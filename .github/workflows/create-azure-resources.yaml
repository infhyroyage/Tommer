name: Create Azure Resources

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/create-azure-resources.yaml
      - functions**
      - resources**

env:
  NODE_VERSION: "20.10.0"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  create-without-logic-apps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ vars.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ vars.AZURE_TENANT_ID }}"}'

      - name: Create Azure Resource Group if Needed
        run: |
          az group create \
            -n ${{ vars.AZURE_RESOURCE_GROUP }} \
            -l ${{ vars.AZURE_LOCATION }}

      - name: Deploy Azure Resources without Logic Apps
        run: |
          az deployment group create \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --template-file resources/storage-insights-functions-apiConn.bicep \
            --parameters \
              apiConnAzureblobName=${{ vars.AZURE_API_CONNECTION_AZUREBLOB }} \
              apiConnOutlookName=${{ vars.AZURE_API_CONNECTION_OUTLOOK }} \
              functionsName=${{ vars.AZURE_FUNCTIONS }} \
              functionsPlanName=${{ vars.AZURE_FUNCTIONS_PLAN }} \
              insightsName=${{ vars.AZURE_APPLICATION_INSIGHTS }} \
              storageName=${{ vars.AZURE_STORAGE }} \
              workspacesName=${{ vars.AZURE_WORKSPACES }}

  build-pages-and-functions-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-tommer-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: ${{ runner.os }}-tommer-${{ hashFiles('**/package-lock.json') }}-

      - name: Install Dependencies
        run: |
          pushd functions
          npm ci
          popd

      - name: Test
        run: |
          pushd functions
          npx jest test --coverage --coverageReporters="json-summary"
          popd

      - name: Create Coverage Badges
        uses: jaywcjlove/coverage-badges-cli@v1.2.5
        with:
          output: public/badges.svg
          source: functions/coverage/coverage-summary.json

      - name: Upload Coverage Badges Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Build
        run: |
          pushd functions
          npm run build
          popd

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.AZURE_FUNCTIONS }}
          path: |
            functions/dist
            functions/host.json
            functions/package.json
            !functions/node_modules

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-pages-and-functions-app
    steps:
      - name: Deploy Coverage Badges
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-functions-app:
    runs-on: ubuntu-latest
    needs:
      - create-without-logic-apps
      - build-pages-and-functions-app
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.AZURE_FUNCTIONS }}

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Install playwright-chromium and Chromium browser at the same time
      # Default installation path is ~/.cache, so overwrite it with PLAYWRIGHT_BROWSERS_PATH
      - name: Install Dependencies and Chromium
        run: npm install --production
        env:
          PLAYWRIGHT_BROWSERS_PATH: ./browser

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ vars.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ vars.AZURE_TENANT_ID }}"}'

      - name: Deploy Azure Functions Application
        uses: Azure/functions-action@v1.5.1
        with:
          app-name: ${{ vars.AZURE_FUNCTIONS }}
          package: .

  create-logic-apps:
    needs: deploy-functions-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Login Azure as Contributor
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.AZURE_AD_SP_CONTRIBUTOR_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_SP_CONTRIBUTOR_CLIENT_SECRET }}","subscriptionId":"${{ vars.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ vars.AZURE_TENANT_ID }}"}'

      - name: Deploy Azure Logic Apps
        run: |
          az deployment group create \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --template-file resources/logic-apps.bicep \
            --parameters \
              apiConnAzureblobName=${{ vars.AZURE_API_CONNECTION_AZUREBLOB }} \
              apiConnOutlookName=${{ vars.AZURE_API_CONNECTION_OUTLOOK }} \
              functionsName=${{ vars.AZURE_FUNCTIONS }} \
              logicAppName=${{ vars.AZURE_LOGIC_APP }} \
              storageName=${{ vars.AZURE_STORAGE }}
